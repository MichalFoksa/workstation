/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package net.michalfoksa.demos.workshop.workstation.rest.api;

import net.michalfoksa.demos.workshop.workstation.rest.model.Message;
import net.michalfoksa.demos.workshop.workstation.rest.model.Task;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

@Api(value = "Tasks", description = "the Tasks API")
public interface TasksApi {

    Logger log = LoggerFactory.getLogger(TasksApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "", nickname = "createTask", notes = "Creating a new user task", response = Task.class, tags={ "tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Task.class),
        @ApiResponse(code = 400, message = "Bad request", response = Message.class) })
    @RequestMapping(value = "/api/tasks",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Task> createTask(@ApiParam(value = "Representation of the task you want to create or update" ,required=true )  @Valid @RequestBody Task task) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"description\" : \"description\",  \"id\" : 0,  \"completed\" : true}", Task.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TasksApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "deleteTask", notes = "Deleting an existing user task", tags={ "tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Success"),
        @ApiResponse(code = 404, message = "Task not found", response = Message.class) })
    @RequestMapping(value = "/api/tasks/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteTask(@ApiParam(value = "ID of the task you want to update or delete",required=true) @PathVariable("id") Long id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TasksApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "getAllTasks", notes = "Retrieving the collection of user tasks", response = Task.class, responseContainer = "List", tags={ "tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Task.class, responseContainer = "List") })
    @RequestMapping(value = "/api/tasks",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Task>> getAllTasks() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {  \"description\" : \"description\",  \"id\" : 0,  \"completed\" : true}, {  \"description\" : \"description\",  \"id\" : 0,  \"completed\" : true} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TasksApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "updateTask", notes = "Updating an existing user task", response = Task.class, tags={ "tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Task.class),
        @ApiResponse(code = 400, message = "Bad request", response = Message.class),
        @ApiResponse(code = 404, message = "Task not found", response = Message.class) })
    @RequestMapping(value = "/api/tasks/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Task> updateTask(@ApiParam(value = "ID of the task you want to update or delete",required=true) @PathVariable("id") Long id,@ApiParam(value = "Representation of the task you want to create or update" ,required=true )  @Valid @RequestBody Task task) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"description\" : \"description\",  \"id\" : 0,  \"completed\" : true}", Task.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TasksApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
