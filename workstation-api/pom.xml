<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>net.michalfoksa.demo.workshop</groupId>
		<artifactId>workstation</artifactId>
		<version>${revision}</version>
		<relativePath>..</relativePath>
	</parent>

	<artifactId>workstation-api</artifactId>
	<description>API library of workstation-service</description>
	<packaging>jar</packaging>

	<dependencies>

		<!-- BTW: Having spring-boot-starter-web dependency would cover all module 
			needs. -->
		<!-- <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId> 
        </dependency> -->

		<!-- Minimal dependencies for code generated by Openapi Generator Spring generator -->
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
		</dependency>

		<dependency>
			<groupId>io.swagger</groupId>
			<artifactId>swagger-annotations</artifactId>
			<version>${swagger.annotations.version}</version>
		</dependency>

		<dependency>
			<groupId>org.openapitools</groupId>
			<artifactId>jackson-databind-nullable</artifactId>
			<version>0.1.0</version>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<!-- Spring Boot plugin isn’t necessary in this module because the main 
				function of it is to create an executable über-jar, which we don’t want and 
				don’t need for a library. -->
			<!-- <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId> 
            </plugin> -->

			<!-- Codegen -->
			<plugin>
				<groupId>org.openapitools</groupId>
				<artifactId>openapi-generator-maven-plugin</artifactId>
				<version>${openapi-generator-plugin.version}</version>

				<executions>
					<execution>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<inputSpec>${project.basedir}/src/main/resources/api/workstation-api.yaml</inputSpec>
							<generatorName>spring</generatorName>
							<apiPackage>${root.api.package}.api</apiPackage>
							<modelPackage>${root.api.package}.model</modelPackage>
							<invokerPackage>${root.api.package}.handler</invokerPackage>
							<configOptions>
								<library>spring-boot</library>
								<dateLibrary>java8</dateLibrary>
								<serializableModel>false</serializableModel>
								<interfaceOnly>true</interfaceOnly>
								<hideGenerationTimestamp>true</hideGenerationTimestamp>
								<useTags>true</useTags>
								<sourceFolder>src/main/java-generated</sourceFolder>
								<additional-properties>interfaceOnly=true</additional-properties>
							</configOptions>
							<output>${project.basedir}</output>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Delete src/main/java-generated as part of generate-sources and clean 
				goals -->
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<configuration>
					<filesets>
						<fileset>
							<directory>${project.basedir}/src/main/java-generated</directory>
							<includes>
								<include>**/*</include>
							</includes>
						</fileset>
					</filesets>
				</configuration>
				<executions>
					<execution>
						<id>delete-src/main/java-generated</id>
						<!-- 'initialize' is the phase before 'generate-sources' use 'verify' 
							to execute it before 'install' -->
						<phase>initialize</phase>
						<goals>
							<goal>clean</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

</project>